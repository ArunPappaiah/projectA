	public Movie(String filmtitle,String filmdirector) {
		title = filmtitle; // This is similar to this.tile = filmtitle, but using this. prefix is not compulsary
		director = filmdirector; // This is similar to this.director = filmdirector
		// as there are no local variables by name title, or director.
		// so here they will implicitly  reffered to global variable.
		// note: If title and director are not globally declare then it will be undeclared variable.
		// if the parameter names are similar to global variables.
		// then there is an ambiguity between the local variable (parameters) and global variable
		// hense this. prefix is used for refering the global variable .
		// title = title will be referring the local variable on both side of the = operator (x=x) self assigning
	}
	LifeCycleMethods;
	1. init-method is post Object creation.
	2. destroy-method is pre-object destruction.
	init-method="setUp" ---> This method is executed immediately after the constructor.
	This method can be used to set up the object before it is ready for service calls.
	destroy-method is only working withsingleton.
	destroy-method is executing before garbage collector call
	When an object is starts init-method runs then it will run destroy-method when set to null.
	
	Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, decorates and otherwise assembles a prototype object, hands it to the client and then has no further knowledge of that prototype instance.
	 For releasing resources try to implement a custom bean post processor.
	 
	 Notes: 
The Spring framework enables automatic dependency injection. 
In other words, by declaring all the bean dependencies in a Spring configuration file, Spring container can autowire relationships between collaborating beans. 
This is called Spring bean autowiring.

Autowiring has the following advantages:
• Autowiring can significantly reduce the need to specify properties or constructor arguments. (Other mechanisms such as a bean template discussed elsewhere in this chapter are also valuable in this regard.)
• Autowiring can update a configuration as your objects evolve. For example, if you need to add a dependency to a class, that dependency can be satisfied automatically without you needing to modify the configuration.
	Thus autowiring can be especially useful during development, without negating the option of switching to explicit wiring when the code base becomes more stable
You can combine autowire behavior with dependency checking, which is performed after autowiring completes.

 <bean id="car" class="com.chainsys.springproject.autowire.Car" scope="prototype"></bean>
 
 -------------------------
  finally {
			try {
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
------------------------------		
 <!-- <property name="emp_id" ref="dao"></property>
  <property name="first_name" ref="dao"></property>
  <property name="last_name" ref="dao"></property>
  <property name="email" ref="dao"></property>
  <property name="phone_number" ref="dao"></property>
  <property name="hire_date" ref="dao"></property>
  <property name="job_id" ref="dao"></property>
  <property name="salary" ref="dao"></property> -->